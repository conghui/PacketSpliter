package fieldaccumulator;

import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFETypeFactory;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStructType;
import com.maxeler.maxcompiler.v2.managers.DFEManager;
import com.maxeler.maxcompiler.v2.statemachine.DFEsmAssignableValue;
import com.maxeler.maxcompiler.v2.statemachine.DFEsmStateEnum;
import com.maxeler.maxcompiler.v2.statemachine.DFEsmStateValue;
import com.maxeler.maxcompiler.v2.statemachine.DFEsmValue;
import com.maxeler.maxcompiler.v2.statemachine.manager.DFEsmPushInput;
import com.maxeler.maxcompiler.v2.statemachine.manager.DFEsmPushOutput;
import com.maxeler.maxcompiler.v2.statemachine.manager.ManagerStateMachine;
import com.maxeler.maxcompiler.v2.statemachine.stdlib.Buffer.DFEsmFifoConfig;
import com.maxeler.maxcompiler.v2.statemachine.stdlib.buffer.DFEsmFifo;
import com.maxeler.networking.v1.kernel_types.UDPOneToOneRXType;

//public class MessageTracker extends ManagerStateMachine {
//  public static final boolean DEBUG_ENABLED = false;
//  public static final String INPUT_FRAME = "input";
//  public static final String OUTPUT_MSGS = "output";
//
//  private final UDPOneToOneRXType udpType;
//  private final DFEStructType inputType;
//  private final DFEsmPushInput input;
//  private final DFEsmPushOutput output;
//  private final DFEsmStateEnum<States> currentState;
//  private final DFEsmStateValue efCount;
//  private final DFEsmStateValue efPos;
//  private final DFEsmStateValue wordPos;
//  private final DFEsmStateValue outputReg;
//  private final DFEsmStateValue outputRegValid;
//  private final DFEsmStateValue outputStalling;
//  private final DFEsmStateValue nextMsgStartWord;
//  private final DFEsmStateValue nextAlignment;
//  private final DFEsmStateValue currentMsgEndWord;
//  private final DFEsmFifo inputFifo;
//  private final DFEsmStateValue frameEndedLastCycle;
//  private final DFEsmStateValue newMessageStarting;
//  private final DFEsmStateValue currentAlignment;
//  private final DFEsmStateValue cycleCounter;
//
//
//
//  public static final OutputType outputType = new OutputType();
//
//  public static class OutputType extends DFEStructType {
//    public static final String DATA = "data";
//    public static final String ALIGNMENT = "alignment";
//    public static final String PADDING = "padding";
//    public static final String SOM = "newMessage";
//    public static final String EOM = "eom";
//    public OutputType() {
//      super(
//          DFEStructType.sft(DATA, DFETypeFactory.dfeRawBits(64)),
//          DFEStructType.sft(ALIGNMENT, DFETypeFactory.dfeUInt(3)),
//          DFEStructType.sft(PADDING, DFETypeFactory.dfeBool()),
//          DFEStructType.sft(SOM, DFETypeFactory.dfeBool()),
//          DFEStructType.sft(EOM, DFETypeFactory.dfeBool())
//      );
//    }
//  }
//
//  private enum States {
//    FIRST,
//    TRACK,
//    GAP
//  }
//
//  public MessageTracker(final DFEManager owner) {
//    super(owner);
//
//    udpType = new UDPOneToOneRXType();
//    inputType = udpType.getDFEStructType();
//
//    final int stallLatency = 16;
//    input = io.pushInput(INPUT_FRAME, dfeUInt(inputType.getTotalBits()), 16);
//    final int inputFifoDepth = 512;
//    final DFEsmFifoConfig fc = new DFEsmFifoConfig();
//    fc.setProgrammableFull(inputFifoDepth - (2*stallLatency));
//    fc.setIsFirstWordFallThrough();
//    inputFifo = buffer.fifo(dfeUInt(inputType.getTotalBits()), inputFifoDepth, fc);
//
//
//    output = io.pushOutput(OUTPUT_MSGS, dfeUInt(outputType.getTotalBits()), 4);
//
//    currentState = state.enumerated(States.class, States.FIRST);
//    efCount = state.value(dfeUInt(16));
//    efPos = state.value(dfeUInt(16));
//    wordPos = state.value(dfeUInt(16));
//    nextMsgStartWord = state.value(dfeUInt(16));
//    nextAlignment = state.value(dfeUInt(3));
//    currentMsgEndWord = state.value(dfeUInt(16));
//    newMessageStarting = state.value(dfeBool());
//    currentAlignment = state.value(dfeUInt(3));
//
//    outputReg = state.value(dfeUInt(outputType.getTotalBits()));
//    outputRegValid = state.value(dfeBool(), false);
//    outputStalling = state.value(dfeBool(), true);
//    frameEndedLastCycle = state.value(dfeBool(), false);
//    cycleCounter = state.value(dfeUInt(64), 0);
//  }
//
//  private DFEsmValue byteOffsetToWordOffset(final DFEsmValue byteOff) {
//    // Each word is 8 bytes, so divide by 8
//    return byteOff.slice(3, byteOff.getType().getTotalBits() - 3).cast(byteOff.getType());
//  }
//
//  private DFEsmValue byteOffsetToAlignment(final DFEsmValue byteOff) {
//    // This would be the modulo 8 of the byte offset
//    return byteOff.slice(0, 3).cast(dfeUInt(3));
//  }
//
//  @Override
//  protected void nextState() {
//    cycleCounter.next <== cycleCounter + 1;
//    outputStalling.next <== output.stall;
//    outputRegValid.next <== false;
//
//    inputFifo.input.writeEnable <== input.valid;
//    inputFifo.input.dataIn <== input;
//
//    final DFEsmValue inputValid = ~(inputFifo.output.empty | outputStalling);
//    final DFEsmValue inputData = SMUtils.extractField(inputFifo.output.dataOut, inputType, udpType.getData());
//    final DFEsmValue inputEof = SMUtils.extractField(inputFifo.output.dataOut, inputType, udpType.getEOF());
//    //		DFEsmValue inputSof = SMUtils.extractField(input, inputType, udpType.getSOF());
//    //		DFEsmValue inputMod = SMUtils.extractField(input, inputType, udpType.getMod());
//
//    SMUtils.assignField(outputReg.next, outputType, OutputType.DATA, inputData);
//    SMUtils.assignField(outputReg.next, outputType, OutputType.ALIGNMENT, 0);
//    SMUtils.assignField(outputReg.next, outputType, OutputType.PADDING, false);
//    SMUtils.assignField(outputReg.next, outputType, OutputType.SOM, false);
//    SMUtils.assignField(outputReg.next, outputType, OutputType.EOM, false);
//    inputFifo.output.readEnable <== false;
//
//    outputRegValid.next <== false;
//
//    /*
//     * On the first cycle, the message starts at offset 4
//     */
//    final int firstMessageAlignment = 4;
//    final int msgOverhead = 2 + 4 + 1 + 3; // #EF + Field A + Field B + Field C size in bytes (10 bytes)
//    final int efSize = 6;
//    DFEsmValue efCount_s;
//    DFEsmValue nextMsgByteOffset;
//    DFEsmValue nextMsgAlignment_s;
//    DFEsmValue nextMsgStartWord_s;
//
//    newMessageStarting.next <== false;
//    frameEndedLastCycle.next <== false;
//    SWITCH (currentState) {
//      CASE (States.FIRST) {
//        SMUtils.assignField(outputReg.next, outputType, OutputType.SOM, true);
//        SMUtils.assignField(outputReg.next, outputType, OutputType.ALIGNMENT, firstMessageAlignment);
//
//
//        efCount_s = SMUtils.extractBytes(inputData, 5, 4);
//        efCount.next <== efCount_s;
//        efPos.next <== 1;
//        wordPos.next <== 1;
//
//        /*
//         * Calculate where the current message ends and the next message begins
//         */
//        nextMsgByteOffset = (firstMessageAlignment + msgOverhead) + efSize * efCount_s;
//        nextMsgAlignment_s = byteOffsetToAlignment(nextMsgByteOffset);
//        currentMsgEndWord.next <==byteOffsetToWordOffset(nextMsgByteOffset);
//
//        IF (nextMsgAlignment_s === 0)
//          currentMsgEndWord.next <== byteOffsetToWordOffset(nextMsgByteOffset) - 1;
//        nextMsgStartWord.next <== byteOffsetToWordOffset(nextMsgByteOffset);
//        nextAlignment.next <== nextMsgAlignment_s;
//
//        IF (inputValid) {
//          inputFifo.output.readEnable <== true;
//          outputRegValid.next <== true;
//          currentState.next <== States.TRACK;
//          printf("efCount_s = %d\n", efCount_s);
//          printStateTransition();
//        }
//
//      }
//
//      CASE (States.TRACK) {
//        IF (inputValid) {
//          inputFifo.output.readEnable <== true;
//          outputRegValid.next <== true;
//          wordPos.next <== wordPos + 1;
//
//          //					printf("wordPos = %d, currentMsgEndWord = %d\n", wordPos, currentMsgEndWord);
//
//          IF (newMessageStarting) {
//            SMUtils.assignField(outputReg.next, outputType, OutputType.SOM, true);
//            SMUtils.assignField(outputReg.next, outputType, OutputType.ALIGNMENT, currentAlignment);
//          }
//
//          IF (wordPos === currentMsgEndWord) {
//            /*
//             * 0 1 2 3 4 5 6 7
//             *     X           // New #ExtraField starts at offest !== 0
//             *     		       // Current word needs to be output twice, once with END_OF_MESSAGE, second time with NEW_MESSAGE
//             *
//             */
//            printf("currentMsgEndWord = %d, nextMsgStartWord = %d\n", currentMsgEndWord, nextMsgStartWord);
//            IF (currentMsgEndWord === nextMsgStartWord) {
//              inputFifo.output.readEnable <== false;
//              wordPos.next <== wordPos;
//            }
//
//            SMUtils.assignField(outputReg.next, outputType, OutputType.EOM, true);
//
//            currentState.next <== States.GAP;
//          }
//
//          frameEndedLastCycle.next <== inputEof;
//
//          IF (inputEof) {
//            // Last word in frame
//            inputFifo.output.readEnable <== true; // drain it!
//            currentState.next <== States.GAP;
//          }
//
//          IF (inputEof | wordPos === currentMsgEndWord) {
//            printStateTransition();
//          }
//          printf("wordPos = %d\n", wordPos);
//        }
//      }
//
//      /*
//       * Insert 1 cycle of Gap, so that downstream kernel can realign the data.
//       * Hopefully, the average throughput will be good enough
//       * Optimization: do some filtering in the Track state and avoid inserting Gaps when the data is not interesting
//       */
//      CASE (States.GAP) {
//        outputRegValid.next <== true;
//        SMUtils.assignField(outputReg.next, outputType, OutputType.PADDING, true);
//        SMUtils.assignField(outputReg.next, outputType, OutputType.EOM, true);
//
//
//        efCount_s = extractExtraFieldCount(inputData, nextAlignment);
//        nextMsgByteOffset = nextAlignment.cast(dfeUInt(16)) + msgOverhead + efSize * efCount_s;
//        nextMsgAlignment_s = byteOffsetToAlignment(nextMsgByteOffset);
//
//
//        nextMsgStartWord_s = wordPos + byteOffsetToWordOffset(nextMsgByteOffset);
//
//        //				printf("wordPos = %d, nextAlignment = %d, efCount_s = %d --> nextMsgByteOffset = %d, nextMsgStartWord_s = %d\n",
//        //						wordPos, nextAlignment, efCount_s, nextMsgByteOffset, nextMsgStartWord_s);
//
//        nextMsgStartWord.next <== nextMsgStartWord_s;
//        nextAlignment.next <== nextMsgAlignment_s;
//        currentAlignment.next <== nextAlignment; // This is the alignment for the message that is about to start
//
//        currentMsgEndWord.next <== nextMsgStartWord_s;
//        IF (nextMsgAlignment_s === 0)
//          currentMsgEndWord.next <== nextMsgStartWord_s - 1;
//
//        printf("nextMsgStartWord = %d, nextAlignment = %d\n", nextMsgStartWord, nextAlignment);
//
//        newMessageStarting.next <== true;
//
//        IF (frameEndedLastCycle) {
//          currentState.next <== States.FIRST;
//        } ELSE {
//          currentState.next <== States.TRACK;
//        }
//        printStateTransition();
//      }
//    }
//  }
//
//  public DFEsmValue extractExtraFieldCount(final DFEsmValue data, final DFEsmValue alignment) {
//    /*
//     * ExtraField Count can be at bytes 0-1, 2-3, 4-5, 6-7
//     * We can just Mux it out of the word
//     */
//
//    final DFEsmAssignableValue efCount = assignable.value(dfeUInt(16));
//
//
//    SWITCH (alignment) {
//      CASE (2) {
//        efCount <== SMUtils.extractBytes(data, 3, 2);
//      }
//
//      CASE (4) {
//        efCount <== SMUtils.extractBytes(data, 5, 4);
//      }
//
//      CASE (6) {
//        efCount <== SMUtils.extractBytes(data, 7, 6);
//      }
//
//      OTHERWISE {
//        efCount <== SMUtils.extractBytes(data, 1, 0);
//      }
//    }
//
//    return efCount;
//  }
//
//  @Override
//  protected void outputFunction() {
//    output <== outputReg;
//    output.valid <== outputRegValid;
//    input.stall <== inputFifo.input.progFull;
//
//    IF (outputRegValid) {
//      printf("Output: Data = 0x%x, Som = %d, Eom = %d, Alignment = %d, isPadding = %d\n",
//          SMUtils.extractField(outputReg, outputType, OutputType.DATA),
//          SMUtils.extractField(outputReg, outputType, OutputType.SOM),
//          SMUtils.extractField(outputReg, outputType, OutputType.EOM),
//          SMUtils.extractField(outputReg, outputType, OutputType.ALIGNMENT),
//          SMUtils.extractField(outputReg, outputType, OutputType.PADDING));
//    }
//  }
//
//  public void printStateTransition() {
//    if (DEBUG_ENABLED) {
//      debug.simPrintf("%StateMachine%: [%d] %s -> %s\n", cycleCounter, currentState, currentState.next);
//    }
//  }
//
//  public void printf(final String format, final Object ... args) {
//    if (DEBUG_ENABLED) {
//      debug.simPrintf("%StateMachine%: [%d] [%s]: ", cycleCounter, currentState);
//      debug.simPrintf(format, args);
//    }
//  }
//
//}

class PackageSpliter extends ManagerStateMachine {
  /// declare some constants
  public static final boolean DEBUG_ENABLED = true;
  public static final String INPUT_FRAME = "inframe";
  public static final String OUTPUT_FRAME = "outframe";

  // There are three modes in this state machine:
  // - NEW PACKAGE
  // - TRACING ONE PACKAGE
  // - GAP BETWEEN FIELD
  enum Mode {
    HEADER_FIRST_CYCLE, TRACKING_HEADER, FIELD_FIRST_CYCLE, TRACKING_FIELDS, GAP_BETWEEN_FIELD
  }

  /// declare the output data type
  /// it is a frame that contains
  /// - 64bits of data,
  /// - the TID of the data
  /// - the FID of the field
  public static final SingleFieldOutputType outputType = new SingleFieldOutputType();
  static final class SingleFieldOutputType extends DFEStructType {
    public static final String DATA = "data";
    public static final String TID = "tid";
    public static final String FID = "fid";
    public static final String ALIGNMENT = "alignment";
    public static final String ISPADDING = "ispadding";
    public static final String SOM = "som"; /// start of message
    public static final String EOM = "eom"; /// end of message

    public SingleFieldOutputType() {
      super(DFEStructType.sft(DATA, PrimitiveType.uint64_t),
          DFEStructType.sft(TID, PrimitiveType.uint32_t),
          DFEStructType.sft(FID, PrimitiveType.uint16_t),
          DFEStructType.sft(ALIGNMENT, DFETypeFactory.dfeUInt(3)),
          DFEStructType.sft(ISPADDING, DFETypeFactory.dfeBool()),
          DFEStructType.sft(SOM, DFETypeFactory.dfeBool()),
          DFEStructType.sft(EOM, DFETypeFactory.dfeBool())
      );

    }
  }

  /// incoming frame data type
  private final UDPOneToOneRXType udpType;
  private final DFEStructType inputType;

  /// declare the input and output
  private final DFEsmPushInput inputFrame;
  private final DFEsmPushOutput outputFrame;
  private final DFEsmFifo inputFifo;

  private final DFEsmStateEnum<Mode> sMode;

  // state value
  private final DFEsmStateValue TID;
  private final DFEsmStateValue lastInputData;
  private final DFEsmStateValue wordPos;
  private final DFEsmStateValue outputReg;
  private final DFEsmStateValue outputRegValid;
  private final DFEsmStateValue outputStalling;
  private final DFEsmStateValue nextMsgStartWord;
  private final DFEsmStateValue nextAlignment;
  private final DFEsmStateValue currentMsgEndWord;
  private final DFEsmStateValue frameEndedLastCycle;
  private final DFEsmStateValue newMessageStarting;
  private final DFEsmStateValue currentAlignment;
  private final DFEsmStateValue cycleCounter;

  protected PackageSpliter(DFEManager owner) {
    super(owner);

    /// input
    udpType = new UDPOneToOneRXType();
    inputType = udpType.getDFEStructType();
    int inputBits = inputType.getTotalBits();
    int inputStallLatency = 16;
    inputFrame = io.pushInput(INPUT_FRAME, dfeUInt(inputBits), inputStallLatency);

    /// create a FIFO
    DFEsmFifoConfig fifoConfig = new DFEsmFifoConfig();
    final int inputFifoDepth = 512;
    fifoConfig.setProgrammableEmpty(inputFifoDepth - 2 * inputStallLatency);
    fifoConfig.setIsFirstWordFallThrough();
    inputFifo = buffer.fifo(dfeUInt(inputBits), inputFifoDepth, fifoConfig);

    /// output
    int outputStallLatency = 4;
    int outputBits = outputType.getTotalBits();
    outputFrame = io.pushOutput(OUTPUT_FRAME, dfeUInt(outputBits), outputStallLatency);


    /// state enumeration
    sMode = state.enumerated(Mode.class, Mode.HEADER_FIRST_CYCLE);

    /// state value
    cycleCounter = state.value(dfeUInt(32), 0);
    TID = state.value(dfeUInt(32));
    lastInputData = state.value(dfeUInt(inputType.getTypeForField(udpType.getData()).getTotalBits()));
    wordPos = state.value(dfeUInt(16));
    nextMsgStartWord = state.value(dfeUInt(16));
    nextAlignment = state.value(dfeUInt(3));
    currentMsgEndWord = state.value(dfeUInt(16));
    newMessageStarting = state.value(dfeBool());
    currentAlignment = state.value(dfeUInt(3));
    outputReg = state.value(dfeUInt(outputType.getTotalBits()));
    outputRegValid = state.value(dfeBool(), false);
    outputStalling = state.value(dfeBool(), true);
    frameEndedLastCycle = state.value(dfeBool(), false);
  }

  @Override
  protected void nextState() {
    cycleCounter.next <== cycleCounter + 1;
    outputStalling.next <== outputFrame.stall;
    outputRegValid.next <== false;

    inputFifo.input.writeEnable <== inputFrame.valid;
    inputFifo.input.dataIn <== inputFrame;

    // we always set them false at first to avoid invalid output
    inputFifo.output.readEnable <== false;
    outputRegValid.next <== false;

    final DFEsmValue inputValid = ~(inputFifo.output.empty | outputStalling);
    final DFEsmValue inputData = SMUtils.extractField(inputFifo.output.dataOut, inputType, udpType.getData());
    final DFEsmValue inputEof = SMUtils.extractField(inputFifo.output.dataOut, inputType, udpType.getEOF());

    SMUtils.assignField(outputReg.next, outputType, SingleFieldOutputType.DATA, inputData);
    SMUtils.assignField(outputReg.next, outputType, SingleFieldOutputType.TID, TID);
    SMUtils.assignField(outputReg.next, outputType, SingleFieldOutputType.ALIGNMENT, 0);
    SMUtils.assignField(outputReg.next, outputType, SingleFieldOutputType.ISPADDING, false);
    SMUtils.assignField(outputReg.next, outputType, SingleFieldOutputType.SOM, false);
    SMUtils.assignField(outputReg.next, outputType, SingleFieldOutputType.EOM, false);

    /**
     * Firstly, calculate the alignment of the first message by
     * skipping the header
     */
    final int headerBytes = 68;
    final int fieldOverhead = 2 + 2; // FID + FieldLength
    DFEsmValue nextMsgByteOffset;
    DFEsmValue nextMsgAlignment_s;
    DFEsmValue nextMsgStartWord_s;

    newMessageStarting.next <== false;
    frameEndedLastCycle.next <== false;

    IF (inputValid) {
      printf("\nbefore switch, data: 0x%x, lastData: 0x%x\n", inputData, lastInputData);
    }

    SWITCH (sMode) {
      CASE (Mode.HEADER_FIRST_CYCLE) {
        /**
         * in this cycle, we set some initial value
         * As we only need the field data, we won't output the header
         */
        IF (inputValid) {
          lastInputData.next <== inputData;

          // we need to drain this frame
          inputFifo.output.readEnable <== true;

          wordPos.next <== 1;

          // move to the next state
          sMode.next <== Mode.TRACKING_HEADER;

          printStateTransition();
        }

      }

      CASE (Mode.TRACKING_HEADER) {
        /**
         * in this state, we need to record the TID of the package
         */
        IF (inputValid) {
          // drain this frame
          lastInputData.next <== inputData;
          inputFifo.output.readEnable <== true;
          wordPos.next <== wordPos + 1;

          IF (wordPos === 1) {
            /**
             *  wordPos counting from 0, in this cycle
             *  we extract TID
             */
            DFEsmValue tid = SMUtils.extractBytes(inputData, 7, 4);
            tid = byteReverse(tid);
            TID.next <== tid;
            printf("tid = 0x%08x\n", tid);
          }

          IF (wordPos === 8) {
            /**
             * Calculate where the current message ends and the next message begins
             */
            DFEsmValue fieldLen = SMUtils.extractBytes(inputData, 7, 6);
            fieldLen = byteReverse(fieldLen);
            printf("fieldLen: hex=0x%04x, dec=%u\n", fieldLen, fieldLen);

            nextMsgByteOffset = (headerBytes + fieldOverhead) + fieldLen;
            printf("nextMsgByteOffset: %d\n", nextMsgByteOffset);

            nextMsgAlignment_s = byteOffsetToAlignment(nextMsgByteOffset);
            nextAlignment.next <== nextMsgAlignment_s;
            printf("nextMsgAlignment_s: %d\n", nextMsgAlignment_s);

            DFEsmValue msgEndWord = byteOffsetToWordOffset(nextMsgByteOffset);
            nextMsgStartWord.next <== msgEndWord;
            printf("msgEndWord: %d\n", msgEndWord);

            IF (nextMsgAlignment_s === 0)
              currentMsgEndWord.next <== msgEndWord - 1;
            ELSE {
              currentMsgEndWord.next <== msgEndWord;
            }

//            /**
//             * construct the first message, only change the fields that are not default
//             */
//            SMUtils.assignField(outputReg.next, outputType, SingleFieldOutputType.ALIGNMENT, firstMessageAlignment);
//            SMUtils.assignField(outputReg.next, outputType, SingleFieldOutputType.ISPADDING, true);
//            SMUtils.assignField(outputReg.next, outputType, SingleFieldOutputType.SOM, true);
//
//            // output this frame
//            outputRegValid.next <== true;
//            sMode.next <== Mode.TRACKING_FIELDS;
            sMode.next <== Mode.FIELD_FIRST_CYCLE;
            printStateTransition();
          }
        }
      }

      CASE (Mode.FIELD_FIRST_CYCLE) {
        IF (inputValid) {
          /**
           * it assumes that the minimal length of field is greater than 8
           */
          outputRegValid.next <== true;
          inputFifo.output.readEnable <== true;
          wordPos.next <== wordPos + 1;
          lastInputData.next <== inputData;
          sMode.next <== Mode.TRACKING_FIELDS;

          int firstMessageAlignment = byteOffsetToAlignment(headerBytes + fieldOverhead);
          SMUtils.assignField(outputReg.next, outputType, SingleFieldOutputType.ALIGNMENT, firstMessageAlignment);
          SMUtils.assignField(outputReg.next, outputType, SingleFieldOutputType.ISPADDING, true);
          SMUtils.assignField(outputReg.next, outputType, SingleFieldOutputType.SOM, true);

          printStateTransition();
        }
      }

      CASE (Mode.TRACKING_FIELDS) {
        IF (inputValid) {
          outputRegValid.next <== true;         // output this word
          inputFifo.output.readEnable <== true; // drain this frame
          wordPos.next <== wordPos + 1;         // move the next word
          lastInputData.next <== inputData;     // update last input input

          printf("wordPos = %d, currentMsgEndWord = %d\n", wordPos, currentMsgEndWord);

          IF (newMessageStarting) {
            SMUtils.assignField(outputReg.next, outputType, SingleFieldOutputType.SOM, true);
            SMUtils.assignField(outputReg.next, outputType, SingleFieldOutputType.ALIGNMENT, currentAlignment);
          }

          IF (wordPos === currentMsgEndWord) {
            printf("currentMsgEndWord = %d, nextMsgStartWord = %d\n", currentMsgEndWord, nextMsgStartWord);

            /**
             * we have read all the words for the current message and see if we need to HOLD the current word for the next message
             *
             * in this following condition, we need to hold the current word because the data in the message is in the current word
             * if nextAlignment === 3, the data in the next message locates in byte[7] in the current word
             *
             *  bytes      :  0     1     2     3     4     5     6     7
             *  alignment 1:  end   fid         field len   data
             *  alignment 2:        end   fid         field len   data
             *  alignment 3:              end   fid         field len   data
             */
            IF (nextAlignment === 1 | nextAlignment === 2 | nextAlignment === 3) {
              /**
               *  We need to hold this frame, don't increase wordPos and don't update lastInputData
               */
              inputFifo.output.readEnable <== false;
              wordPos.next <== wordPos;
              lastInputData.next <== lastInputData;
            }

            SMUtils.assignField(outputReg.next, outputType, SingleFieldOutputType.EOM, true);

            sMode.next <== Mode.GAP_BETWEEN_FIELD;
          }

          frameEndedLastCycle.next <== inputEof;

          IF (inputEof) {
            // Last word in frame
            printf("this is the last word of the frame\n");
            inputFifo.output.readEnable <== true; // drain it!
            sMode.next <== Mode.GAP_BETWEEN_FIELD;
          }

//          IF (inputEof | wordPos === currentMsgEndWord) {
          printStateTransition();
//          }
        } // if input valid
      } // case tracking between fields

      /*
       * Insert 1 cycle of Gap, so that downstream kernel can realign the data.
       * Hopefully, the average throughput will be good enough
       * Optimization: do some filtering in the Track state and avoid inserting Gaps when the data is not interesting
       */
      CASE (Mode.GAP_BETWEEN_FIELD) {
        outputRegValid.next <== true;
        SMUtils.assignField(outputReg.next, outputType, SingleFieldOutputType.ISPADDING, true);
        SMUtils.assignField(outputReg.next, outputType, SingleFieldOutputType.EOM, true);

        DFEsmValue fieldLen = extractFieldLengthBetweenFields(inputData, nextAlignment);

        nextMsgByteOffset = calculateNextMsgByteOffset(nextAlignment, fieldOverhead, fieldLen);

        nextMsgAlignment_s = byteOffsetToAlignment(nextMsgByteOffset);

        DFEsmValue msgEndWord = byteOffsetToWordOffset(nextMsgByteOffset);
        nextMsgStartWord_s = wordPos + msgEndWord;

//        printf("wordPos = %d, nextAlignment = %d, efCount_s = %d --> nextMsgByteOffset = %d, nextMsgStartWord_s = %d\n",
//            wordPos, nextAlignment, efCount_s, nextMsgByteOffset, nextMsgStartWord_s);

        nextMsgStartWord.next <== nextMsgStartWord_s;
        nextAlignment.next <== nextMsgAlignment_s;
        currentAlignment.next <== nextAlignment; // This is the alignment for the message that is about to start

        currentMsgEndWord.next <== nextMsgStartWord_s;
        IF (nextMsgAlignment_s === 0)
          currentMsgEndWord.next <== nextMsgStartWord_s - 1;

        printf("nextMsgStartWord = %d, nextAlignment = %d\n", nextMsgStartWord, nextAlignment);

        newMessageStarting.next <== true;

        IF (frameEndedLastCycle) {
          sMode.next <== Mode.HEADER_FIRST_CYCLE;
          outputRegValid.next <== false;
        } ELSE {
          sMode.next <== Mode.TRACKING_FIELDS;
        }
        printStateTransition();
      }
    }
  }

  @Override
  protected void outputFunction() {
    outputFrame <== outputReg;
    outputFrame.valid <== outputRegValid;
    inputFrame.stall <== inputFifo.input.progFull;

    IF (outputRegValid) {
      printf("Output: Data = 0x%x, tid=0x%08x, Som = %d, Eom = %d, Alignment = %d, isPadding = %d\n",
          SMUtils.extractField(outputReg, outputType, SingleFieldOutputType.DATA),
          SMUtils.extractField(outputReg, outputType, SingleFieldOutputType.TID),
          SMUtils.extractField(outputReg, outputType, SingleFieldOutputType.SOM),
          SMUtils.extractField(outputReg, outputType, SingleFieldOutputType.EOM),
          SMUtils.extractField(outputReg, outputType, SingleFieldOutputType.ALIGNMENT),
          SMUtils.extractField(outputReg, outputType, SingleFieldOutputType.ISPADDING));
    }

  }

  private DFEsmValue byteOffsetToWordOffset(final DFEsmValue byteOff) {
    // Each word is 8 bytes, so divide by 8
    return byteOff.slice(3, byteOff.getType().getTotalBits() - 3).cast(byteOff.getType());
  }

  private DFEsmValue byteOffsetToAlignment(final DFEsmValue byteOff) {
    // This would be the modulo 8 of the byte offset
    return byteOff.slice(0, 3).cast(dfeUInt(3));
  }

  private int byteOffsetToAlignment(final int byteOff) {
    // This would be the modulo 8 of the byte offset
    return byteOff % 8;
  }

  private DFEsmValue extractFieldLengthBetweenFields(final DFEsmValue data, final DFEsmValue alignment) {
    final DFEsmAssignableValue fieldLen = assignable.value(dfeUInt(16));

    SWITCH (alignment) {
      CASE (0) {
        /**
         *                        0     1     2     3     4     5     6     7
         * currentMsgEndWorld:                                                  # last cycle
         * NextMsgStartWorld:     fid       |field len|   data                  # this cycle
         */
        fieldLen <== SMUtils.extractBytes(data, 3, 2);
      }

      CASE (1) {
        /**
         * 0     1     2     3     4     5     6     7
         *       fid       |field len|   data
         */
        fieldLen <== SMUtils.extractBytes(data, 4, 3);
      }

      CASE (2) {
        /**
         * 0     1     2     3     4     5     6     7
         *             fid       |field len|   data
         */
        fieldLen <== SMUtils.extractBytes(data, 5, 4);
      }

      CASE (3) {
         /**
         * 0     1     2     3     4     5     6     7
         *                   fid       |field len|   data
         */
        fieldLen <== SMUtils.extractBytes(data, 6, 5);
      }

      CASE (4) {
         /**
         * 0     1     2     3     4     5     6     7
         *                         fid       |field len|    # previous cycle
         * data                                             # this cycle
         */
        fieldLen <== SMUtils.extractBytes(lastInputData, 7, 6);
      }

      CASE (5) {
         /**
         * 0     1     2     3     4     5     6     7
         *                              fid       |field ..     # previous cycle
         * len|  data                                           # this cycle
         */
        DFEsmValue byte1 = SMUtils.extractByte(lastInputData, 7);
        DFEsmValue byte2 = SMUtils.extractByte(data, 0);
        fieldLen <== (byte1 # byte2);
      }

      CASE (6) {
         /**
         * 0     1     2     3     4     5     6     7
         *                                    fid       # previous cycle
         * |field len| data                             # this cycle
         */
        fieldLen <== SMUtils.extractBytes(data, 1, 0);
      }

      CASE (7) {
         /**
         * 0     1     2     3     4     5     6     7
         *                                           fid       # previous cycle
         *      |field len| data                             # this cycle
         */
        fieldLen <== SMUtils.extractBytes(data, 2, 1);
      }

    }

    return fieldLen;
  }

  private DFEsmValue calculateNextMsgByteOffset(final DFEsmValue alignment, final int overhead, final DFEsmValue fieldLen) {
    DFEsmAssignableValue nextMsgByteOffset = assignable.value(dfeUInt(16));

    IF (alignment <= 3) {
      nextMsgByteOffset <== alignment.cast(dfeUInt(16)) + overhead + fieldLen;
    } ELSE {
      nextMsgByteOffset <== alignment.cast(dfeUInt(16)) + overhead + fieldLen - 8;
    }

    return nextMsgByteOffset;
  }

  public void printStateTransition() {
    if (DEBUG_ENABLED) {
      debug.simPrintf("%StateMachine%: [%d] %s -> %s\n", cycleCounter, sMode, sMode.next);
    }
  }

  public void printf(final String format, final Object ... args) {
    if (DEBUG_ENABLED) {
      debug.simPrintf("%StateMachine%: [%d] [%s]: ", cycleCounter, sMode);
      debug.simPrintf(format, args);
    }
  }

//  public DFEsmValue extractBigEndianBytes(DFEsmValue v, int idx, int bytes) {
//    DFEsmAssignableValue ret = assignable.value(dfeUInt(bytes*8));
//
//    for (int i = 0; i < bytes; i++) {
//      ret[(8*i + 1) - 1 : 8*i] = SMUtils.extractByte(v, byteIndex)
//    }
//  }
  public DFEsmValue byteReverse(DFEsmValue v) {
    DFEsmValue r = null;

    int size = v.getType().getTotalBits() / 8;
    for (int i = 0; i < size; i++) {
      DFEsmValue b = v.slice(i*8, 8);
      if (i == 0) {
        r = b;
      } else {
        r = r # b;
      }
    }

    return r.cast(v.getType());
  }

}