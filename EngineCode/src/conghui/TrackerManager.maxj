package conghui;


import com.maxeler.maxcompiler.v2.managers.BuildConfig;
import com.maxeler.maxcompiler.v2.managers.custom.ManagerClock;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.StateMachineBlock;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.DebugLevel;
import com.maxeler.networking.v1.managers.NetworkManager;
import com.maxeler.networking.v1.managers.netlib.Max4NetworkConnection;
import com.maxeler.networking.v1.managers.netlib.UDPChecksumMode;
import com.maxeler.networking.v1.managers.netlib.UDPConnectionMode;
import com.maxeler.networking.v1.managers.netlib.UDPStream;


public class TrackerManager extends NetworkManager {

	public TrackerManager(final TrackerEngineParameters params) {
		super(params.getEngineParams());

		debug.setDebugLevel(new DebugLevel().setHasStreamStatus(true));

		final UDPStream frameIn = addUDPStream("udpTopPort1", Max4NetworkConnection.QSFP_TOP_10G_PORT1, UDPConnectionMode.OneToOne, UDPChecksumMode.DropBadFrames);

		final ManagerClock netClk = getNetworkClock(Max4NetworkConnection.QSFP_TOP_10G_PORT1);
		pushDefaultClock(netClk);

		connect2(this, frameIn);
	}

	private static void connect2(NetworkManager manager, UDPStream frameIn) {
	  NonBlockSimFramedKernel k = new NonBlockSimFramedKernel(manager.makeKernelParameters("NonBlockSimFramedKernel"));
	  KernelBlock kernel = manager.addKernel(k);
	  kernel.getInput(NonBlockSimFramedKernel.INPUT_UDP) <== frameIn.getReceiveStream();
	  manager.addFramedStreamToCPU("toCPU", NonBlockSimFramedKernel.outputLinkType) <== kernel.getOutput(NonBlockSimFramedKernel.OUTPUT_FRAME);
	}

	private static void connect1(NetworkManager manager, UDPStream frameIn) {
	  /**
	   * UDP -> SM -> kernel
	   */
		final StateMachineBlock msgTracker = manager.addStateMachine("msgTracker", new PackageSpliterStateMachine(manager));
		msgTracker.getInput(PackageSpliterStateMachine.INPUT_FRAME) <== frameIn.getReceiveStream();
		final KernelBlock kernel = manager.addKernel(new XtpDisplayKernel(manager.makeKernelParameters("filteringKernel")));
		kernel.getInput(XtpDisplayKernel.INPUT_MESSAGES) <== msgTracker.getOutput(PackageSpliterStateMachine.OUTPUT_FRAME);
		manager.addFramedStreamToCPU("toCPU", XtpDisplayKernel.outputLinkType) <== kernel.getOutput(XtpDisplayKernel.OUTPUT_MY_OUTPUT);

	}
	public static void main(final String[] args) {
		final TrackerEngineParameters params = new TrackerEngineParameters(args);
		final TrackerManager manager = new TrackerManager(params);

		final BuildConfig buildConfig = manager.getBuildConfig();
		buildConfig.setMPPRCostTableSearchRange(params.getMPPRStartCT(), params.getMPPREndCT());
		buildConfig.setMPPRParallelism(params.getMPPRThreads());
		buildConfig.setMPPRRetryNearMissesThreshold(params.getMPPRRetryThreshold());

		manager.build();
	}

}
